on:
  push:
  # schedule:
  #   - cron: '0 17 * * *' # every day at 5pm UTC

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      all-dists: ${{ steps.get-all-dists.outputs.dists }}
    steps:
      - uses: actions/checkout@v3
      - id: get-all-dists
        name: Get all distributions
        run: |
          cd dist
          echo "dists=$(ls -ld */* | grep ^d | awk '{print $9}' | jq -cnMR '[inputs | select(length>0)]')" >> $GITHUB_OUTPUT
  e2e:
    # We use this runner because it is currently the only runner that supports nested virtualization.
    # See https://github.com/actions/virtual-environments/issues/433 for more
    # information
    runs-on: macos-12
    timeout-minutes: 30 # If something hangs, timeout the job in 30 so we aren't billed for 6h * distributions * 10 (mac-os minute multiplier)
    needs:
      - setup
    permissions:
      id-token: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        dist: ${{ fromJSON(needs.setup.outputs.all-dists) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::147803588724:role/github-action
          aws-region: us-west-2

      - name: Import e2e API TOKEN
        run: |
          e2e_api_token=$(aws secretsmanager get-secret-value --secret-id /prod/gh-actions/orchestrator-e2e-token --region us-west-2 | jq -r '.SecretString')
          echo "::add-mask::${e2e_api_token}"
          echo "TEST_API_TOKEN=${e2e_api_token}" >> $GITHUB_ENV

      - name: Enable vagrant-registration for rhel
        if: ${{ startsWith(matrix.dist, 'rhel') }}
        run: vagrant plugin install vagrant-registration

      - name: Cache Vagrant box
        # Caches that are not accessed within the last week will be evicted
        # If any or all of the vagrant files change a lot in a short period of time
        # the cache may hit its 10GB limit at which point it will just start trimming
        # cached items in order of oldest to newest. Worst case it will re-download a vagrant box
        # (see https://github.com/actions/cache#cache-limits)
        uses: actions/cache@v3
        with:
          path: ~/.vagrant.d/boxes
          key: ${{ runner.os }}-vagrant-${{ matrix.dist }}-${{ hashFiles('**/Vagrantfile') }}

      - name: Provision e2e environment
        env:
          RHEL_USERNAME: ${{ secrets.RHEL_USERNAME }}
          RHEL_PASSWORD: ${{ secrets.RHEL_PASSWORD }}
        run: |
          cd ./dist/${{ matrix.dist }}
          vagrant box update
          vagrant up --provision

      - name: Run e2e
        env:
          DIST: ${{ matrix.dist }}
        run: |
          cd ./dist/${{ matrix.dist }}
          vagrant upload ../../interactive/install.sh /tmp/install.sh
          vagrant upload ../../e2e.sh
          vagrant ssh -c "TEST_API_TOKEN=$TEST_API_TOKEN DIST=$DIST /bin/bash /home/vagrant/e2e.sh"

      - name: Destroy e2e environment
        run: |
          cd ./dist/${{ matrix.dist }}
          vagrant destroy -f
