#
# This file contains our private CMA cloudformation definition
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  PrivateCMATask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !Sub canarymonitor/agent:${ContainerVersion}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref PrivateCMATaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: logs
          Name: privatecma
          ReadonlyRootFilesystem: false
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: CANARY_API_TOKEN
              Value: !Sub "@secret@:/${EnvironmentTagName}/private-cma/canary-api-token#token"
            - Name: CANARY_API_HOST
              Value: !Ref AppAPIHostname
            - Name: CANARY_INSTANCE_ID
              Value: !Sub "canary-private-${AWS::Region}"
            - Name: CANARY_TELEMETRY_HOST
              Value: !Ref EnvConfigapiEndpointstelemetryAPIAsString
            - Name: CANARY_INVOCATION_STYLE
              Value: rundll
            - Name: ENVIRONMENT_TAG
              Value: !Sub ${EnvironmentTagName}
            - Name: SECRETS_NAMESPACE
              Value: !Sub /${EnvironmentTagName}/
            - Name: CANARY_RUN_GROUPS
              Value: "Canary Monitoring Agent"
            - Name: CANARY_CLEANUP_ENABLED
              Value: "true"
            - Name: CLOUD_PLATFORM
              Value: "aws"
            - Name: EXECUTION_REGION
              Value: !Ref AWS::Region
      Cpu: 512
      ExecutionRoleArn: !GetAtt OrchestratorTaskExecutionRole.Arn
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt OrchestratorTaskTaskRole.Arn
      Volumes: []
    DependsOn: PrivateCMATaskLogGroup
  PrivateCMAService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-PrivateCMAService
      TaskDefinition: !Ref PrivateCMATask
      EnableExecuteCommand: true
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DeploymentController:
        Type: ECS
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue:
                !Sub "${NetworkStackName}-${EnvironmentTagName}-CanaryVPCPrivateSubnet1"
            - Fn::ImportValue:
                !Sub "${NetworkStackName}-${EnvironmentTagName}-CanaryVPCPrivateSubnet2"
          SecurityGroups:
            - Fn::ImportValue:
                !Sub "${NetworkStackName}-${EnvironmentTagName}-CanaryVPCDefaultSecruityGroup"
  OrchestratorTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-OrchestratorT-execution
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: DownloadDockerImagesFromECR
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:*:*:log-group:/stackery/task/${AWS::StackName}-*
  OrchestratorTaskTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-OrchestratorTask-task
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: TriggerLambdaFunctions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Sub arn:aws:lambda:*:*:function:monitor-*
        - PolicyName: AllowSSMExec
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:*
                Resource: '*'
        - PolicyName: AccessSecrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:GetResourcePolicy
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
  PrivateCMATaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/task/${AWS::StackName}-PrivateCMATask/logs
Parameters:
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected at deploy time by deploy.sh)
  NetworkStackName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/stacks/networkStackName
  ContainerVersion:
    Type: String
    Description: Container version (injected at deploy time by deploy.sh)
  EnvConfigapiEndpointstelemetryAPIAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/apiEndpoints/telemetryAPI
  AppAPIHostname:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/apiEndpoints/appAPI
